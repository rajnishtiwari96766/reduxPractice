const redux=require('redux')
const createStore=redux.createStore
const applyMiddleware=redux.applyMiddleware
const thunkMiddelware=require('redux-thunk').default
const axios=require('axios')

//initialstate
const initialState={
    loading:false,
    user:[],
    error:''
}

//actions to get data from api
const FETCH_USER_REQUEST='FETCH_USER_REQUEST'
const FETCH_USER_SUCCESS='FETCH_USER_SUCCESS'
const FETCH_USER_FAILURE='FETCH_USER_FAILURE'

//methods to get the data
const fetchUserRequest=()=>{
    return{
        type:FETCH_USER_REQUEST
    }
}

const fetchUserSuccess=user=>{
    return{
        type:FETCH_USER_SUCCESS,
        payload:user
    }
}

const fetchUserFailure=error=>{
    return{
        type:FETCH_USER_FAILURE,
        payload:error
    }
}

//reducer for actions
const reducer=(state=initialState,type)=>{
    switch(action.type){
        case FETCH_USER_REQUEST:
            return{
                ...state,
                loading:true
            }

            case FETCH_USER_SUCCESS:
                return{
                    loading:false,
                    user:action.payload,
                    error:''
                }

                case FETCH_USER_FAILURE:
                    return{
                        loading:false,
                        user:'',
                        error:action.payload
                    }
    }
}

const fetchUser=()=>{
    return function(dispatch){
        dispatch(fetchUserRequest())
        axios.get('https://jsonplaceholder.typicode.com/users')
        .then(response=>{
            //response.data
            // const user=response.data.map(user => user.id)
            dispatch(fetchUserRequest(response.data.map(user => user.id)))
        })
        .catch(error=>{
            //display error
            dispatch(fetchUserFailure(error.message))
        })
    }
}

const store=createStore(reducer,applyMiddleware(thunkMiddelware))   
store.subscribe(()=>{console.log(store.getState())})
store.dispatch(fetchUser())